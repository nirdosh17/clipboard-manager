name: Release App

on:
  push:
    branches:
      - main
      - codesign

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      # Get version from package.json
      - name: Get app version
        id: version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # 🔐 Create and import self-signed certificate
      - name: Create self-signed cert
        run: |
          CERT_NAME="ClipboardManagerSelfSign"
          CERT_PASS="${{ secrets.CERT_PASS }}"
          CERT_FILE="selfsign.p12"

          # 1️⃣ Generate private key + certificate
          openssl req -new -newkey rsa:2048 -x509 -days 365 \
            -nodes -subj "/CN=$CERT_NAME" \
            -keyout selfsign.key -out selfsign.crt

          # 2️⃣ Package into PKCS#12 with name
          openssl pkcs12 -export -inkey selfsign.key -in selfsign.crt \
            -out $CERT_FILE -passout pass:$CERT_PASS -name "$CERT_NAME"

          # 3️⃣ Create temporary keychain
          security create-keychain -p "" build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # 4️⃣ Import certificate into keychain
          security import $CERT_FILE -k build.keychain -P $CERT_PASS -T /usr/bin/codesign -T /usr/bin/security

          # Set partition list to allow codesign to access the key
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

          # 5️⃣ Make sure codesign sees this keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain

          # 6️⃣ Show available identities (debug)
          security find-identity -v -p codesigning build.keychain

          echo "CERT_NAME=$CERT_NAME" >> $GITHUB_ENV

      # 🛠️ Build Electron app
      - name: Build macOS ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            npm run build:mac:arm64
          else
            npm run build:mac:x64
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 🛡️ Codesign the built app
      - name: Codesign app ${{ matrix.arch }}
        run: |
          # Find the app bundle in the correct architecture-specific directory
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            APP_PATH="dist/mac-arm64/Clipboard Manager.app"
          else
            APP_PATH="dist/mac/Clipboard Manager.app"
          fi

          echo "Signing $APP_PATH with identity: $CERT_NAME"

          # Check if app exists
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: App bundle not found at $APP_PATH"
            ls -la dist/
            exit 1
          fi

          # Ensure keychain is unlocked and in search path
          security unlock-keychain -p "" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain

          # Show identities for debugging
          echo "Available signing identities:"
          security find-identity -v -p codesigning build.keychain

          # Sign with hardened runtime
          codesign --deep --force --verbose \
            --options runtime \
            --keychain build.keychain \
            --sign "$CERT_NAME" \
            "$APP_PATH"

          # Verify
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"
          spctl --assess --type execute -v "$APP_PATH" || true
        env:
          CERT_NAME: ${{ env.CERT_NAME }}

      # 📦 Package DMG into a zip per architecture
      - name: Package DMG ${{ matrix.arch }}
        run: |
          APP_NAME="Clipboard Manager-${VERSION}-${{ matrix.arch }}"
          mkdir -p dist-release/"$APP_NAME"
          cp dist/*.dmg dist-release/"$APP_NAME"/
          cd dist-release
          zip -r "clipboard-manager-${{ matrix.arch }}.zip" "$APP_NAME"

      # Upload artifact for release
      - name: Upload artifact ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: clipboard-manager-${{ matrix.arch }}
          path: dist-release/clipboard-manager-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Get version from package.json
      - name: Get app version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist-release

      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          files: ./dist-release/**/*.zip
          fail_on_unmatched_files: true
          generate_release_notes: true
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
