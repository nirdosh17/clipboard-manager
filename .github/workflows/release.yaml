name: Release App

on:
  push:
    branches:
      - main   # Or your default branch

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x64]  # Build both architectures in parallel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      # Get version from package.json and set it as an environment variable
      - name: Get app version
        id: version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # Build Electron app for current architecture
      - name: Build macOS ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            npm run build:mac:arm64
          else
            npm run build:mac:x64
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Package DMG in zip with top-level folder
      - name: Package DMG ${{ matrix.arch }}
        run: |
          APP_NAME="Clipboard Manager-${VERSION}-${{ matrix.arch }}"
          mkdir -p dist-release/"$APP_NAME"
          cp dist/*.dmg dist-release/"$APP_NAME"/
          cd dist-release
          zip -r "clipboard-manager-${{ matrix.arch }}.zip" "$APP_NAME"

      # Upload artifact for release
      - name: Upload artifact ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: clipboard-manager-${{ matrix.arch }}
          path: dist-release/clipboard-manager-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Get version from package.json
      - name: Get app version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # Download all artifacts from parallel builds
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist-release

      # Create GitHub Release and attach both zips
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"   # Use version from package.json
          files: ./dist-release/**/*.zip
          fail_on_unmatched_files: true
          generate_release_notes: true
        continue-on-error: true  # Don't fail the workflow if tag already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
