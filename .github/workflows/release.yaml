name: Release App

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if build should run
        id: check
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Always build if manually triggered
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger, building..."
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Tag v$VERSION does not exist, building..."
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      # Get version from package.json
      - name: Get app version
        id: version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # 🛠️ Build Electron app
      - name: Build macOS ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            npm run build:mac:arm64
          else
            npm run build:mac:x64
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 📦 Package app bundle into a zip per architecture
      - name: Package app ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            APP_PATH="dist/mac-arm64/Clipboard Manager.app"
          else
            APP_PATH="dist/mac/Clipboard Manager.app"
          fi

          mkdir -p dist-release
          cd dist-release
          ditto -c -k --sequesterRsrc --keepParent "../$APP_PATH" "clipboard-manager-${VERSION}-${{ matrix.arch }}.zip"

      # Upload artifact for release
      - name: Upload artifact ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: clipboard-manager-${{ matrix.arch }}
          path: dist-release/clipboard-manager-${{ env.VERSION }}-${{ matrix.arch }}.zip

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Get version from package.json
      - name: Get app version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist-release

      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          files: ./dist-release/**/*.zip
          fail_on_unmatched_files: true
          generate_release_notes: true
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
